package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"DebtBot/config"
	"DebtBot/db"
	"DebtBot/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type Bot struct {
	botAPI    *tgbotapi.BotAPI
	db        *db.DB
	state     map[int64]string            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞)
	inputData map[int64]map[string]string // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

func NewBot(cfg *config.Config, database *db.DB) (*Bot, error) {
	botAPI, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("error creating bot API: %w", err)
	}

	return &Bot{
		botAPI:    botAPI,
		db:        database,
		state:     make(map[int64]string),
		inputData: make(map[int64]map[string]string),
	}, nil
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := b.botAPI.GetUpdatesChan(u)
	if err != nil {
		return fmt.Errorf("error getting updates channel: %w", err)
	}

	log.Println("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

	for update := range updates {
		log.Println("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", update)

		if update.Message != nil { // Handle messages
			log.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:", update.Message)

			userID := int64(update.Message.From.ID)
			b.db.CreateUserIfNotExist(userID) // Ensure user exists in DB

			command := update.Message.Command()
			text := update.Message.Text

			log.Printf("–ö–æ–º–∞–Ω–¥–∞: '%s', –¢–µ–∫—Å—Ç: '%s'", command, text)

			switch command {
			case "start", "help":
				log.Println("–ö–æ–º–∞–Ω–¥–∞: /start –∏–ª–∏ /help")
				b.handleHelpCommand(update.Message)
			case "addcredit":
				log.Println("–ö–æ–º–∞–Ω–¥–∞: /addcredit")
				b.handleAddCreditCommand(update.Message)
			case "mycredits":
				log.Println("–ö–æ–º–∞–Ω–¥–∞: /mycredits")
				b.handleMyCreditsCommand(update.Message)
			case "deletecredit":
				log.Println("–ö–æ–º–∞–Ω–¥–∞: /deletecredit")
				b.handleDeleteCreditCommand(update.Message)
			default:
				// Check for button presses (text messages from reply keyboard)
				switch text {
				case "–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç":
					log.Println("–ö–Ω–æ–ø–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
					b.handleAddCreditCommand(update.Message)
				case "–ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã":
					log.Println("–ö–Ω–æ–ø–∫–∞: –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã")
					b.handleMyCreditsCommand(update.Message)
				case "–£–¥–∞–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç":
					log.Println("–ö–Ω–æ–ø–∫–∞: –£–¥–∞–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
					b.handleDeleteCreditCommand(update.Message)
				case "–ü–æ–º–æ—â—å":
					log.Println("–ö–Ω–æ–ø–∫–∞: –ü–æ–º–æ—â—å")
					b.handleHelpCommand(update.Message)
				default:
					log.Println("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
					if state, ok := b.state[userID]; ok {
						log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–∞–π–¥–µ–Ω–æ: %s, –≤—ã–∑–æ–≤ handleInputData", userID, state)
						b.handleInputData(update.Message, state)
					} else if !strings.HasPrefix(text, "/") { // Ignore non-command messages after command flow
						log.Println("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'")

					} else {
						log.Println("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
					}
				}
			}
		} else {
			log.Println("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			continue
		}
	}
	return nil
}

// handleCallbackQuery –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboard

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	helpText := `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ç–≤–æ–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	// Create ReplyKeyboardMarkup
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç"),
			tgbotapi.NewKeyboardButton("üí∂ –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç"),
			tgbotapi.NewKeyboardButton("üÜò –ü–æ–º–æ—â—å"),
		),
	)
	keyboard.ResizeKeyboard = true // Optional: make keyboard smaller

	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = tgbotapi.ModeMarkdown
	_, err := b.botAPI.Send(msg)
	if err != nil {
		log.Printf("Error sending message with buttons: %v", err)
	}
	b.sendMessage(message.Chat.ID, helpText, message.MessageID) // Corrected sendMessage call
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è handleAddCreditCommand, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è UserID –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
func (b *Bot) handleAddCreditCommandForCallback(message *tgbotapi.Message, userID int64) {
	log.Printf("handleAddCreditCommandForCallback - UserID –∏–∑ callbackQuery.From.ID: %d", userID) // –õ–û–ì –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	b.state[userID] = "waiting_bank_name"
	b.inputData[userID] = make(map[string]string)
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: %s", userID, b.state[userID])

	msgText := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:"
	msg := tgbotapi.NewMessage(message.Chat.ID, msgText)

	// Optionally add a cancel button if needed during input process - Inline Keyboard still possible if needed for cancel
	/*cancelKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel_addcredit"),
		),
	)
	msg.ReplyMarkup = cancelKeyboard*/

	_, err := b.botAPI.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

// handleAddCreditCommand —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã /addcredit
// –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message.From.ID –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
func (b *Bot) handleAddCreditCommand(message *tgbotapi.Message) {
	userID := int64(message.From.ID)
	log.Printf("handleAddCreditCommand (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞) - UserID –∏–∑ message.From.ID: %d", userID) // –õ–û–ì –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–æ–∫
	b.state[userID] = "waiting_bank_name"
	b.inputData[userID] = make(map[string]string)
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤: %s", userID, b.state[userID])

	msgText := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:"
	b.sendMessage(message.Chat.ID, msgText, message.MessageID)
}

func (b *Bot) handleInputData(message *tgbotapi.Message, state string) {
	userID := int64(message.From.ID)
	text := message.Text
	log.Printf("handleInputData –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, —Ç–µ–∫—Å—Ç: %s", userID, state, text)

	switch state {
	case "waiting_bank_name":
		b.inputData[userID]["bank_name"] = text
		b.state[userID] = "waiting_loan_amount"
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: %s, –±–∞–Ω–∫: %s", userID, b.state[userID], text)
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:", message.MessageID)

	case "waiting_loan_amount":
		_, err := strconv.ParseFloat(text, 64)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10000.50", message.MessageID)
			return
		}
		b.inputData[userID]["loan_amount"] = text
		b.state[userID] = "waiting_due_date"
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: %s, —Å—É–º–º–∞: %s", userID, b.state[userID], text)
		b.sendMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31):", message.MessageID)

	case "waiting_due_date":
		_, err := time.Parse("2006-01-02", text)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31)", message.MessageID)
			return
		}
		b.inputData[userID]["due_date"] = text

		credit := &models.Credit{
			UserID:     userID,
			BankName:   b.inputData[userID]["bank_name"],
			LoanAmount: parseFloat(b.inputData[userID]["loan_amount"]),
			DueDate:    parseDate(b.inputData[userID]["due_date"]),
		}

		err = b.db.AddCredit(credit)
		if err != nil {
			log.Printf("Error adding credit to DB: %v", err)
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", message.MessageID)
		} else {
			b.sendMessage(message.Chat.ID, "–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", message.MessageID)
		}

		delete(b.state, userID)
		delete(b.inputData, userID)
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–±—Ä–æ—à–µ–Ω—ã", userID)

	case "waiting_credit_to_delete": // <--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		creditIndex, err := strconv.Atoi(text)
		if err != nil {
			b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", message.MessageID)
			return
		}

		creditsToDelete, ok := b.inputData[userID]["credits_to_delete"]
		if !ok {
			log.Printf("Error: credits_to_delete data not found for user %d", userID)
			b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", message.MessageID)
			delete(b.state, userID)
			delete(b.inputData, userID)
			return
		}

		creditIDs := strings.Split(creditsToDelete, ",") // Assuming IDs are stored as comma-separated string
		if creditIndex <= 0 || creditIndex > len(creditIDs) {
			b.sendMessage(message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.", message.MessageID)
			return
		}

		creditIDToDelete, err := strconv.Atoi(creditIDs[creditIndex-1]) // Get the correct credit ID
		if err != nil {
			log.Printf("Error converting credit ID to int: %v", err)
			b.sendMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", message.MessageID)
			delete(b.state, userID)
			delete(b.inputData, userID)
			return
		}

		err = b.db.DeleteCredit(creditIDToDelete) // <--- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
		if err != nil {
			log.Printf("Error deleting credit from DB: %v", err)
			b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", message.MessageID)
		} else {
			b.sendMessage(message.Chat.ID, "–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", message.MessageID)
		}

		delete(b.state, userID)
		delete(b.inputData, userID)
		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞", userID)
	}
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è handleMyCreditsCommand, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∏–∑ CallbackQuery
func (b *Bot) handleMyCreditsCommandForCallback(message *tgbotapi.Message, userID int64) {
	log.Printf("handleMyCreditsCommandForCallback - UserID –∏–∑ callbackQuery.From.ID: %d", userID) // –õ–û–ì
	credits, err := b.db.GetCreditsByUser(userID)                                                 // <-- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô userID
	if err != nil {
		log.Printf("handleMyCreditsCommandForCallback: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ DB: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.", message.MessageID)
		return
	}

	if len(credits) == 0 {
		b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcredit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", message.MessageID)
		return
	}

	formattedCredits := "*–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:*\n\n"
	for _, credit := range credits {
		formattedCredits += fmt.Sprintf("üè¶ *–ë–∞–Ω–∫:* %s\n", credit.BankName)
		formattedCredits += fmt.Sprintf("üí∞ *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* %.2f ‚ÇΩ\n ", credit.LoanAmount)
		formattedCredits += fmt.Sprintf("üìÖ *–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:* %s\n", credit.DueDate.Format("02.01.2006"))
		formattedCredits += "---\n"
	}

	b.sendMessage(message.Chat.ID, formattedCredits, message.MessageID)

}

// handleMyCreditsCommand —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã /mycredits
func (b *Bot) handleMyCreditsCommand(message *tgbotapi.Message) {
	userID := int64(message.From.ID)                                                                 // <-- UserID –∏–∑ message.From.ID –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
	log.Printf("handleMyCreditsCommand (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞) - UserID –∏–∑ message.From.ID: %d", userID) // –õ–û–ì
	credits, err := b.db.GetCreditsByUser(userID)
	if err != nil {
		log.Printf("handleMyCreditsCommand (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞): –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ DB: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.", message.MessageID)
		return
	}

	if len(credits) == 0 {
		b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcredit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", message.MessageID)
		return
	}

	formattedCredits := "*–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:*\n\n"
	for _, credit := range credits {
		formattedCredits += fmt.Sprintf("üè¶ *–ë–∞–Ω–∫:* %s\n", credit.BankName)
		formattedCredits += fmt.Sprintf("üí∞ *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* %.2f ‚ÇΩ\n ", credit.LoanAmount)
		formattedCredits += fmt.Sprintf("üìÖ *–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:* %s\n", credit.DueDate.Format("02.01.2006"))
		formattedCredits += "---\n"
	}

	b.sendMessage(message.Chat.ID, formattedCredits, message.MessageID)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è handleDeleteCreditCommand, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∏–∑ CallbackQuery
func (b *Bot) handleDeleteCreditCommandForCallback(message *tgbotapi.Message, userID int64) {
	log.Printf("handleDeleteCreditCommandForCallback - UserID –∏–∑ callbackQuery.From.ID: %d", userID) // –õ–û–ì
	credits, err := b.db.GetCreditsByUser(userID)
	if err != nil {
		log.Printf("handleDeleteCreditCommandForCallback: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ DB: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", message.MessageID)
		return
	}

	if len(credits) == 0 {
		b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcredit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", message.MessageID)
		return
	}

	formattedCredits := "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
	var creditIDs []string // To store credit IDs for later deletion
	for i, credit := range credits {
		formattedCredits += fmt.Sprintf("%d. üè¶ *–ë–∞–Ω–∫:* %s, üí∞ *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* %.2f ‚ÇΩ, üìÖ *–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:* %s\n", i+1, credit.BankName, credit.LoanAmount, credit.DueDate.Format("02.01.2006"))
		creditIDs = append(creditIDs, strconv.Itoa(credit.ID)) // Store credit IDs as strings
	}

	b.sendMessage(message.Chat.ID, formattedCredits, message.MessageID)
}

// handleDeleteCreditCommand —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã /deletecredit
func (b *Bot) handleDeleteCreditCommand(message *tgbotapi.Message) {
	userID := int64(message.From.ID)
	log.Printf("handleDeleteCreditCommand (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞) - UserID –∏–∑ message.From.ID: %d", userID) // –õ–û–ì
	credits, err := b.db.GetCreditsByUser(userID)
	if err != nil {
		log.Printf("handleDeleteCreditCommand (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞): –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ DB: %v", err)
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", message.MessageID)
		return
	}

	if len(credits) == 0 {
		b.sendMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addcredit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", message.MessageID)
		return
	}

	formattedCredits := "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
	var creditIDs []string // To store credit IDs for later deletion
	for i, credit := range credits {
		formattedCredits += fmt.Sprintf("%d. üè¶ *–ë–∞–Ω–∫:* %s, üí∞ *–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:* %.2f ‚ÇΩ, üìÖ *–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:* %s\n", i+1, credit.BankName, credit.LoanAmount, credit.DueDate.Format("02.01.2006"))
		creditIDs = append(creditIDs, strconv.Itoa(credit.ID)) // Store credit IDs as strings
	}

	b.sendMessage(message.Chat.ID, formattedCredits, message.MessageID)
}

func (b *Bot) SendNotifications() {
	credits, err := b.db.GetCreditsDueTomorrow()
	if err != nil {
		log.Printf("Error getting credits due tomorrow: %v", err)
		return
	}

	for _, credit := range credits {
		user, err := b.db.GetUser(credit.UserID)
		if err != nil {
			log.Printf("Error getting user %d: %v", credit.UserID, err)
			continue
		}

		notificationText := fmt.Sprintf("üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É!*\n\n–ë–∞–Ω–∫: %s\n–°—É–º–º–∞: %.2f\n–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: %s\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –∑–∞–≤—Ç—Ä–∞!",
			credit.BankName, credit.LoanAmount, credit.DueDate.Format("02.01.2006"))
		b.sendMessage(user.ID, notificationText, 0) // No reply for notifications
	}
}

// Modified sendMessage function to accept replyToMessageID
func (b *Bot) sendMessage(chatID int64, text string, replyToMessageID int) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown // –í–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if replyToMessageID != 0 {
		msg.ReplyToMessageID = replyToMessageID // Set reply to message ID if provided
	}
	_, err := b.botAPI.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
func parseFloat(s string) float64 {
	val, _ := strconv.ParseFloat(s, 64) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—ã–ª–∞ —Ä–∞–Ω—å—à–µ
	return val
}

func parseDate(s string) time.Time {
	t, _ := time.Parse("2006-01-02", s) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç.–∫. –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—ã–ª–∞ —Ä–∞–Ω—å—à–µ
	return t
}
